I"	F<h1 id="мотивы">Мотивы</h1>

<p>Необходимо последовательно выполнить провероку над данными, а затем для них применить изменения. Причем порядок проверок и изменений хочется применять как угодно, в зависимости от ситуации. В этом нам на помощь приходит поведенческий паттерн <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D0%BF%D0%BE%D1%87%D0%BA%D0%B0_%D0%BE%D0%B1%D1%8F%D0%B7%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B5%D0%B9"><strong>«Цепочка обязанностей»</strong></a>.</p>

<p>Например нам надо проверить строку с телефонным номером и отформатировать ее. Опишем по порядку какие действия мы хотим выполнить:</p>

<ol>
  <li>Строка не должна быть пустой и не <span class="wordcode">nil</span></li>
  <li>Строка должна содержать определенное количество символов</li>
  <li>Необходимо отформатировать строку с учетом указанного формата</li>
</ol>

<blockquote>
  <p><strong>Цепочка обязанностей</strong> — это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.</p>
</blockquote>

<p>Playground с <a href="https://gist.github.com/alobanov/30dec2f118532b4cc32d82bc321ac1bd">примером</a> на Git-Hub :octocat:</p>

<hr />

<h1 id="реализация">Реализация</h1>

<p>Общий интерфейс для всех обработчиков <span class="wordcode">MiddlewareProtocol</span>:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">protocol</span> <span class="kt">MiddlewareProtocol</span> <span class="p">{</span>
  <span class="c1">// Связываем текущий и следующий экземпляр обработчика</span>
  <span class="kd">@discardableResult</span> <span class="kd">func</span> <span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareProtocol</span>
  <span class="c1">// Этот метод необходимо перегрузить, в нем описывается вся логика</span>
  <span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="kt">MiddlewareItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareItem</span>
  <span class="c1">// Вспомогательный метод для упрощения вызова следующей проверки в цепочке</span>
  <span class="kd">func</span> <span class="nf">checkNext</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="kt">MiddlewareItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareItem</span>
<span class="p">}</span></code></pre></figure>

<p>Добавим перечисление <span class="wordcode">MiddlewareItem</span> – этот тип данных содержит само значение <span class="wordcode">.value</span> и ошибку <span class="wordcode">.error</span> если мы не прошли валидацию:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">public</span> <span class="kd">enum</span> <span class="kt">MiddlewareItem</span> <span class="p">{</span>
  <span class="k">case</span> <span class="nf">value</span><span class="p">(</span><span class="kt">String</span><span class="p">?)</span>
  <span class="k">case</span> <span class="nf">error</span><span class="p">(</span><span class="kt">String</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Базовая реализация обработчика <span class="wordcode">MiddlewareProtocol</span>:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">Middleware</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">next</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span><span class="p">?</span>

  <span class="kd">@discardableResult</span> <span class="kd">func</span> <span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareProtocol</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">with</span>
    <span class="k">return</span> <span class="n">with</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="kt">MiddlewareItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareItem</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">checkNext</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">checkNext</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="kt">MiddlewareItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareItem</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">next</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">next</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="n">value</span> <span class="p">}</span>
    <span class="k">return</span> <span class="n">next</span><span class="o">.</span><span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="все-обработчики-необходимо-наследовать-от-middleware">Все обработчики необходимо наследовать от Middleware</h4>

<p>Теперь напишем конкретные обработчики для валидации и изменения данных, в нашем случае это строка:</p>

<ol>
  <li>Обработчик проверки на <span class="wordcode">nil</span> и пустую строку: <span class="wordcode">CheckNilMiddleware</span></li>
  <li>Обработчик проверки на длинну строки: <span class="wordcode">CheckCountMiddleware</span></li>
  <li>Обработчик который форматирует строку с учетом указанного формата: <span class="wordcode">PhoneFormatterMiddleware</span></li>
</ol>

<p>Реализация <a href="https://github.com/alobanov/ExampleArticleComposite/tree/master/chainOfResponsibilityValidation/chainOfResponsibilityValidation.playground">всех трех классов описаных выше</a> :octocat:.</p>

<hr />

<h1 id="разберем-подробнее">Разберем подробнее</h1>

<ol>
  <li>Обработчик должен наследоваться от <span class="wordcode">Middleware</span></li>
  <li>Перегружем метод <span class="wordcode">check(value: MiddlewareItem) -&gt; MiddlewareItem</span> и описываем логику проверок, изменений над данными <span class="wordcode">.value(let val)</span>.</li>
  <li>Если все успешно вызываем следующую проверку в нашем списке цепочек <span class="wordcode">return checkNext(value: value)</span>
    <ul>
      <li>Если хотим прервать выполнение то сразу возвращаем ошибку <span class="wordcode">return .error(“Example error text”)</span>.</li>
      <li>Если хотим подменить данные то передаем новое значение <span class="wordcode">return checkNext(value: .value(“New value”))</span></li>
    </ul>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">override</span> <span class="kd">func</span> <span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="kt">MiddlewareItem</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareItem</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="n">value</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="k">let</span> <span class="nv">str</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">str</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// Выполняем проверку</span>
        <span class="c1">// Валидация не прошла, возвращаем ошибку</span>
        <span class="k">return</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="s">"Example error text"</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="k">default</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="p">}</span>
    <span class="c1">// Если все успешно вызываем следующую</span>
    <span class="c1">// проверку в нашем списке цепочек</span>
    <span class="k">return</span> <span class="nf">checkNext</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>
  <span class="p">}</span></code></pre></figure>

<h4 id="смотри-комментарии-к-коду">Смотри комментарии к коду</h4>

<hr />

<h2 id="использование">Использование</h2>

<p>Проверяем и отформатируем телефонный номер с помощью нашей реализации:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="kt">Middleware</span><span class="p">()</span>
<span class="n">start</span>
  <span class="o">.</span><span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">CheckNilMiddleware</span><span class="p">())</span>
  <span class="o">.</span><span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">CheckCountMiddleware</span><span class="p">(</span><span class="nv">length</span><span class="p">:</span> <span class="mi">11</span><span class="p">))</span>
  <span class="o">.</span><span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">PhoneFormatterMiddleware</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"+X (XXX) XXX XX-XX"</span><span class="p">))</span>

<span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">start</span><span class="o">.</span><span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="s">"79634480209"</span><span class="p">)))</span>

<span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
<span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span> <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
<span class="k">case</span> <span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="k">let</span> <span class="nv">result</span><span class="p">):</span> <span class="nf">print</span><span class="p">(</span><span class="n">result</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Можно добавить немного функциональной магии, добавим оператор <span class="wordcode">|&gt;</span></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">precedencegroup</span> <span class="kt">ForwardOperator</span> <span class="p">{</span>
  <span class="nv">associativity</span><span class="p">:</span> <span class="n">left</span>
<span class="p">}</span>

<span class="k">infix</span> <span class="k">operator</span> <span class="o">|&gt;</span><span class="p">:</span> <span class="kt">ForwardOperator</span>

<span class="kd">func</span> <span class="o">|&gt;</span> <span class="p">(</span><span class="nv">lhs</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span><span class="p">,</span> <span class="nv">rhs</span><span class="p">:</span> <span class="kt">MiddlewareProtocol</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MiddlewareProtocol</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">lhs</span><span class="o">.</span><span class="nf">link</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// после можно использовать такое написание</span>
<span class="k">let</span> <span class="nv">start</span> <span class="o">=</span> <span class="kt">Middleware</span><span class="p">()</span>
<span class="n">start</span>
  <span class="o">|&gt;</span> <span class="kt">NilValidation</span><span class="p">()</span>
  <span class="o">|&gt;</span> <span class="kt">CountValidation</span><span class="p">(</span><span class="nv">length</span><span class="p">:</span> <span class="mi">11</span><span class="p">)</span>
  <span class="o">|&gt;</span> <span class="kt">PhoneFormatterValidation</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"+X (XXX) XXX XX-XX"</span><span class="p">)</span>

<span class="k">switch</span> <span class="n">start</span><span class="o">.</span><span class="nf">check</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="s">"79634481259"</span><span class="p">))</span> <span class="p">{</span>
<span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="n">error</span><span class="p">):</span> <span class="nf">print</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
<span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">value</span><span class="p">(</span><span class="n">result</span><span class="p">):</span> <span class="nf">print</span><span class="p">(</span><span class="n">result</span> <span class="p">??</span> <span class="s">""</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Результатом выполнения будет вывод в консоль: <span class="wordcode">+7 (963) 448 02-09</span></p>

<hr />

<h2 id="в-заключении">В заключении</h2>

<p>Таким образом мы можем добавлять сколько угодно не зависящих друг от друга обработчиков и использовать их в зависимости от ситуации.</p>

<p>Где еще можно использовать:</p>

<ul>
  <li>Редактор изображений. Добавить обработчики которые будут выполнять манипуляции над изображением, таким образом получим удобный способ применять фильтры</li>
  <li>Валидация при авторизации или регистрации пользователя</li>
</ul>

<h4 id="есть-вопросы-пишите-сюда--alobanov">Есть вопросы? Пишите сюда – <a href="https://twitter.com/alobanov">@alobanov</a></h4>

:ET