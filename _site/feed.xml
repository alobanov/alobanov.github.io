<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alobanov</title>
    <description>Разработчик приложений под iOS c 2011 года. Живу и работаю в Екатеринбурге. Увлекаюсь web-дизайном и проектированием интерфейсов для мобильных устройств.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 15 Jan 2016 11:19:43 +0000</pubDate>
    <lastBuildDate>Fri, 15 Jan 2016 11:19:43 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>V I P E R</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;пердисловие&lt;/h4&gt;

&lt;p&gt;Данный материал не претендует на авторство, эта статья является нарзкой переводов статей про архитектуру VIPER из разных источников. Список сипользуемого материала:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.9i8drrh43&quot;&gt;iOS Architecture Patterns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mutualmobile.github.io/blog/2013/12/04/viper-introduction/&quot;&gt;Introduction to VIPER&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.objc.io/issues/13-architecture/viper/&quot;&gt;Architecting iOS Apps with VIPER&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;Вступление&lt;/h1&gt;

&lt;p&gt;Давайте определим особенности хорошей архитектуры:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Сбалансированное &lt;strong&gt;распределение обязанностей&lt;/strong&gt; между сущностями, чтобы у каждой была своя строгая роль.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Использование тестов&lt;/strong&gt; с первого момента разработки.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Простота в использовании&lt;/strong&gt; с возможностью легко поддреживать написаное.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1. Распределение обязанностей?&lt;/h3&gt;

&lt;p&gt;Распределение создает нагрузку на наш мозг, в то время как мы пытаемся понять, как все работают. Если вы думаете: чем больше вы разрабатываете тем лучше ваш мозг адаптируется к пониманию сложных вещей, тогда вы правы. Но это также значит что вы не развиваетеся линейно и очень быстро достигнете потолка. И так самый простой путь победить сложности это разделить ответственность на несколько сущностей по принцыпоу &lt;a href=&quot;http://www.wikiwand.com/en/Single_responsibility_principle&quot;&gt;единой ответственности&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2. Использование тестов?&lt;/h3&gt;

&lt;p&gt;Это не вопрос для тех, кто уже почувствовал пользу от юнит тестов, которые &lt;strong&gt;не удалось&lt;/strong&gt; использовать после добавления новых функций или в результате рефакторинга. Это значит что тесты &lt;strong&gt;спасут&lt;/strong&gt; разработчика от поиска ошибок в рантайме, которые могут произойти, когда приложение уже у пользователя и исправление займет неделю прежде чем достигнет пользователя.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;3. Простота в использовании&lt;/h3&gt;

&lt;p&gt;VIPER is our application of Clean Architecture to iOS apps. The word VIPER is a backronym for View, Interactor, Presenter, Entity and Routing.
Решил собрать в одном месте все материалы по VIPER’у, а так же написать пару строк от себя. Как говоится когда рассказываешь другим и сам начинаешь глубже разбираться в материале.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section-5&quot;&gt;Теория&lt;/h1&gt;
&lt;p&gt;Главные части VIPER’а это:&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;View&lt;/strong&gt;: displays what it is told to by the Presenter and relays user input back to the Presenter.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interactor&lt;/strong&gt;: contains the business logic as specified by a use case.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Presenter&lt;/strong&gt;: contains view logic for preparing content for display (as received from the Interactor) and for reacting to user inputs (by requesting new data from the Interactor).&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Entity&lt;/strong&gt;: содержит базовую модель объектов которую использует &lt;em&gt;interactor&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Routing&lt;/strong&gt;: содержит описание логики переходов, какие экраны показать и в каком порядке.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Это не введение в модель MVC, а обзор его осуществления на &lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.jcq3apf1r&quot;&gt;Smalltalk-80&lt;/a&gt; для понимания первоначальных намерений и функций триады. Классическая MVC поможет лучше понять последующее развитие паттернов, которые появились позже. Посмотрим, как простое MVC приложение работает в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; и изучим как оно может быть реализовано на языке &lt;strong&gt;ActionScript&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Model-view-controller&lt;/strong&gt; (MVC, «Модель-представление-поведение», «Модель-представление-контроллер») – архитектура программного обеспечения, в которой &lt;a href=&quot;http://www.wikiwand.com/en/Single_responsibility_principle&quot;&gt;модель данных&lt;/a&gt; приложения, [пользовательский интерфейс][3] и управляющая логика разделены на три отдельных компонента, так, что модификация одного из компонентов оказывает минимальное воздействие на другие компоненты.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;model-view-controller--smalltalk-80&quot;&gt;Реализация Model-View-Controller в Smalltalk-80.&lt;/h2&gt;
&lt;p&gt;Модель MVC облегчает разделение ответственности при разработке интерактивных графических приложений. Логика и состояние приложения, как пользователи взаимодействуют с приложением, и как состояние приложения представляется пользователю по средствам отдельных элементов триады MVC. &lt;strong&gt;Smalltalk-80&lt;/strong&gt; использует метафору MVC, что обеспечивает встроенную поддержку для интерактивной разработки приложений.&lt;/p&gt;

&lt;p&gt;Идея заключалась в том, чтобы обеспечить набор встроенных компонентов [пользовательского интерфейса][4], таких как кнопки, меню и списки, которые могут быть подключены к GUI приложения. Для эффективного использования этих встроенных элементов интерфейса, реализация должна была быть построена в соответствии с &lt;em&gt;MVC&lt;/em&gt;. Давайте посмотрим на концептуальную диаграмму приложения &lt;strong&gt;Smalltalk-80&lt;/strong&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/schemamvc.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;img-classemoji-titlepointup-altpointup-srchttpsassetsgithubcomimagesiconsemojiunicode261dpng-height20-width20-alignabsmiddle---mvc--smalltalk-80-krasner--pope&quot;&gt;&lt;img class=&quot;emoji&quot; title=&quot;:point_up:&quot; alt=&quot;:point_up:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/261d.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; Диаграмма MVC в Smalltalk-80 (Krasner &amp;amp; Pope)&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;Диаграмма MVC в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; ([Krasner &amp;amp; Pope][5]) Все объекты в Smalltalk общаться друг с другом при помощи сообщений, которые является способом вызова методов объекта. На первый взгляд, диаграмма MVC кажется немного странной. Model-View и Controller-Model имеют зависимости направленные в обе стороны. Вторым интересным аспектом было то, что пользовательский ввод идет непосредственно через контроллер. Это является существенным изменением, как правило мы ожидаем от пользователя взаимодействия с элементами интерфейса в представлении (View), а не в корнтроллере.&lt;/p&gt;

&lt;p&gt;В &lt;strong&gt;Smalltalk-80&lt;/strong&gt;, все данные с устройства ввода подаются непосредственно в контроллер. Давайте кратко рассмотрим, как MVC поддерживается в &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;mvc---smalltalk-80&quot;&gt;MVC классы в Smalltalk-80.&lt;/h1&gt;
&lt;p&gt;Есть три абстрактных класса называемые Модель, Вид и Контроллер. Все конкретные реализации модели, вида и контроллера должны иметь подклассы этих абстрактных суперклассов. Давайте взглянем на классы (это сокращенное описание – см. [Krasner &amp;amp; Pope][6]).
- &lt;strong&gt;Модель&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Model&lt;/strong&gt; реализует общую модель поведения. Он реализует механизм зависимости обслуживания.&lt;/p&gt;

&lt;p&gt;Вид может зарегистрироваться на конкретную модель чтобы стать подписчиком и получать оповещения об изменениях. Если конкретная модель рассылает свои сообщения, то они будут автоматически отправлены всем своим подписанным представлениям. Это реализация [паттерна Наблюдатель][7] (паттерн поведения объектов). Конкретная модель напрямую не знает о зависимых от него представлениях.
- &lt;strong&gt;Представление&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;View&lt;/strong&gt; реализует общие поведения представления. Встроенный набор компонентов подкласса представления (например, StandardSystemView – стандартное окно и TextEditorView – текстовый редактор).&lt;/p&gt;

&lt;p&gt;Представления могут быть вложенными для разработки сложного пользовательского интерфейса. Например, StandardSystemView (т.е. окна) содержит компонент представления, называемые TextEditorView. Каждое представление может иметь одну модель и один контроллер. Встроенный компоненты по умолчанию имеют заранее определенный класс контроллера для реализации своего стандартного поведения. Чтобы создать экземпляр компонента, вам нужно настроить свою модель и отобразить компонент. Компонент затем будет инициализировать по умолчанию контроллер со своим экземпляром модели и регистрироваться в ней для получения сообщений. При закрытии компонента, освобождаются все вложенные компоненты. Когда представление освободилось, оно удаляет свои подписки на сообщения из модели. Если вы хотите чтобы компоненты имели своё уникальное поведения, вы можете создать свой контроллер для него.
- &lt;strong&gt;Контроллер&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Controller&lt;/strong&gt; реализующий общие поведения. Каждый контроллер имеет ссылку на одну модель, один контроллер, и глобальную переменную называемую сенсор, который предоставляет интерфейс взаимодействия для устройств ввода (мышь, клавиатура). Абстрактный класс контроллера реализующий его общие поведения для определения уже конкретного контроллера и соответствующего ему представления. Если конкретное представление является активным (которое в данный момент использует пользователь), то егоконтроллер осуществляет управление всего пользовательского ввода.&lt;/p&gt;

&lt;p&gt;Контроллер должен иметь прямую ссылку на представление, например для того чтобы знать расположен ли сейчас курсора мыши над конкретным представлением. Важно отметить, что только контроллеры, а не представление, получает информацию о вводе данных (с клавиатуры или мышки).&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mvc--smalltalk-80&quot;&gt;Ключевые особенности реализации MVC на &lt;strong&gt;Smalltalk-80&lt;/strong&gt;:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;представления могут быть вложенными;&lt;/li&gt;
  &lt;li&gt;каждый встроенный компонент (например &lt;strong&gt;ListBox&lt;/strong&gt;) это представление;&lt;/li&gt;
  &lt;li&gt;каждый вид имеет соответствующий контроллер;&lt;/li&gt;
  &lt;li&gt;контроллер осведомляет своё представление, если оно активно;&lt;/li&gt;
  &lt;li&gt;активные контроллер (чье представление в данный момент активно) получает данные которые изменил пользователь при помощи устройств ввода;&lt;/li&gt;
  &lt;li&gt;контроллер может обновить представление (компонент) на основе действий пользователя;&lt;/li&gt;
  &lt;li&gt;контроллер изменяет модель на действий пользователя;&lt;/li&gt;
  &lt;li&gt;представление обновляет себя пир помощи наблюдателя, синхронизированного с моделью.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/article/2016/01/14/2014-VIPER.html</link>
        <guid isPermaLink="true">http://yourdomain.com/article/2016/01/14/2014-VIPER.html</guid>
        
        <category>viper</category>
        
        <category>ios</category>
        
        <category>objective-c</category>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>Мультиязычность в iOS</title>
        <description>&lt;!-- &lt;div class=&quot;size-960 banner-red&quot;&gt;
    &lt;img src=&quot;/images/github.svg&quot; alt=&quot;GitHub&quot; size=&quot;100&quot;&gt;
 &lt;/div&gt;--&gt;

&lt;p&gt;Стандартное решение от &lt;img class=&quot;emoji&quot; title=&quot;:apple:&quot; alt=&quot;:apple:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f34e.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;strong&gt;Apple&lt;/strong&gt; предлагает отталкиваться от выбранного языка на нашем устройстве. То есть, чтобы поменять язык в приложении, необходимо полностью поменять язык системы. Что делать, если хочется изменить язык на лету, не выходя из приложения и, тем более, не меняя полностью локаль на устройстве?&lt;/p&gt;

&lt;p&gt;Один из вариантов – брать необходимый файл переводов и локализовать приложение на основе выставления своих настроек языка, сохраняя их например в &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Я подготовил менеджер который позволит без труда реализовать быстрое переключение языка в приложении. Проект можно скачать тут &lt;a href=&quot;https://github.com/alobanov/ALLocalizedManager&quot;&gt;ALLocalizedManager&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;Менеджер мультиязычноти&lt;/h1&gt;

&lt;p&gt;Чтобы все это дело заработало необходимо проинициализировать &lt;a href=&quot;https://github.com/alobanov/ALLocalizedManager&quot;&gt;ALLocalizedManager&lt;/a&gt;&lt;img class=&quot;emoji&quot; title=&quot;:octocat:&quot; alt=&quot;:octocat:&quot; src=&quot;https://assets.github.com/images/icons/emoji/octocat.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; вызвав метод &lt;span class=&quot;wordcode&quot;&gt;ALLocalizedInit&lt;/span&gt; (все методы менеджера сделаны макросами, для удобства) желательно поместить вызов в &lt;span class=&quot;wordcode&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; класса &lt;span class=&quot;wordcode&quot;&gt;AppDelegate&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;В момент инициализации проверяется установленый язык из &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;, если настроек еще нет (например, при первом запуске приложения), то берем язык системы и записываем в &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;. После этого, даже если поменять язык системы, в приложении сохранится тот язык, который был проинициалищирован при первом запуске приложения.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;использование&lt;/h3&gt;

&lt;p&gt;В момент установки новой локали необходимо разослать сообщение об этом изменении:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;n&quot;&gt;ALLocalizationSetLanguage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationThrowNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Так как необходимо переключать язык на лету надо отслеживать события измененя, поэтому подписываемся на событие &lt;span class=&quot;wordcode&quot;&gt;ALLocalizedManagerChangeLangNotification&lt;/span&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;bp&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNotificationCenter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
           &lt;span class=&quot;nl&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/selector&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@selector&amp;lt;/a&amp;gt;(changeAppLanguage:)&lt;/span&gt;
               &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLocalizedManagerChangeLangNotification&lt;/span&gt;
             &lt;span class=&quot;nl&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateTitles:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Change_language&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Изменить язык&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;nl&quot;&gt;forState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIControlStateNormal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Привет мир&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALLocalizedStringFromTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;Current_lang&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Русский&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;examplePlist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;После этого в методе обновления нужно обновить текстовки &lt;strong&gt;/&lt;/strong&gt; картинки &lt;strong&gt;/&lt;/strong&gt; ресурсы.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-2&quot;&gt;настройка языков&lt;/h3&gt;

&lt;p&gt;Логика выбора языка во время первого запуска приложения: берется язык системы и проверяется, есть ли он в определенном нами списке  языков. Если системный язык отсутствует в словаре, берем тот, который отмечен ключом &lt;span class=&quot;wordcode&quot;&gt;isDefault&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Пример словаря языков, который необходимо настроить в зависимости от вашего проекта:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;languageList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;l&quot;&gt;@[@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;ru&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Русский&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;isDefault&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;YES&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;English&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;l&quot;&gt;@{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;es&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&amp;quot;Spanish&amp;quot;&lt;/span&gt;&lt;span class=&quot;l&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;allocalizationresource-allocalizationimage&quot;&gt;Также можно локализовать ресурсы и картинки (ALLocalizationResource, ALLocalizationImage)&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-3&quot;&gt;методы&lt;/h3&gt;

&lt;p&gt;Все макросы для работы с менеджером&lt;img class=&quot;emoji&quot; title=&quot;:metal:&quot; alt=&quot;:metal:&quot; src=&quot;https://assets.github.com/images/icons/emoji/metal.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// init localized manager&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizedInit&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Update current index by index&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationSetLanguageByIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// set language (example &amp;quot;ru&amp;quot;,&amp;quot;en&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationSetLanguage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// return &amp;quot;ru&amp;quot;,&amp;quot;en&amp;quot; and etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationGetLanguage&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Full name of lang&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationGetNameLanguage&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// take current index selected language&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationGetLanguageIndex&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// reset all by default&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationReset&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// after selecting language you can throw notice&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationThrowNotification&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// localized images&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizationImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// localized string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLocalizedStringFromTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;a-hrefhttpsgithubcomalobanov-classuser-mentionalobanovahttpstwittercomalobanov&quot;&gt;Есть вопросы? Пишите сюда – &lt;a href=&quot;https://twitter.com/alobanov&quot;&gt;&lt;a href=&quot;https://github.com/alobanov&quot; class=&quot;user-mention&quot;&gt;@alobanov&lt;/a&gt;&lt;/a&gt;&lt;/h4&gt;
</description>
        <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/libs/2014/01/07/2014-ALLocalizedManager.html</link>
        <guid isPermaLink="true">http://yourdomain.com/libs/2014/01/07/2014-ALLocalizedManager.html</guid>
        
        
        <category>libs</category>
        
      </item>
    
      <item>
        <title>Классический MVC</title>
        <description>&lt;h1 id=&quot;mvc--smalltalk-80&quot;&gt;Перевод статьи Била Сандерса о реализации классического мета паттерна MVC на Smalltalk-80. &lt;/h1&gt;

&lt;p&gt;Это мой вольный перевод статьи Била Сандерса о реализации классического мета паттерна &lt;strong&gt;MVC&lt;/strong&gt; на &lt;strong&gt;Smalltalk-80&lt;/strong&gt;. Так как это мой первый опыт, строго не судите и в комментариях желательно оставлять какие либо замечания по тексту. Переводил не дословно, немного из русскоязычных источников накопал (&lt;img class=&quot;emoji&quot; title=&quot;:grin:&quot; alt=&quot;:grin:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f601.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt; и каюсь, перевёл не всё).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;section&quot;&gt;Предисловие&lt;/h1&gt;

&lt;p&gt;Это не введение в модель MVC, а обзор его осуществления на &lt;a href=&quot;https://ru.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk-80&lt;/a&gt; для понимания первоначальных намерений и функций триады. Классическая MVC поможет лучше понять последующее развитие паттернов, которые появились позже. Посмотрим, как простое MVC приложение работает в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; и изучим как оно может быть реализовано на языке &lt;strong&gt;ActionScript&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Model-view-controller&lt;/strong&gt; (MVC, «Модель-представление-поведение», «Модель-представление-контроллер») — архитектура программного обеспечения, в которой &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&quot;&gt;модель данных&lt;/a&gt; приложения, &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательский интерфейс&lt;/a&gt; и управляющая логика разделены на три отдельных компонента, так, что модификация одного из компонентов оказывает минимальное воздействие на другие компоненты.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;model-view-controller--smalltalk-80&quot;&gt;Реализация Model-View-Controller в Smalltalk-80.&lt;/h3&gt;
&lt;p&gt;Модель MVC облегчает разделение ответственности при разработке интерактивных графических приложений. Логика и состояние приложения, как пользователи взаимодействуют с приложением, и как состояние приложения представляется пользователю по средствам отдельных элементов триады MVC. &lt;strong&gt;Smalltalk-80&lt;/strong&gt; использует метафору MVC, что обеспечивает встроенную поддержку для интерактивной разработки приложений.&lt;/p&gt;

&lt;p&gt;Идея заключалась в том, чтобы обеспечить набор встроенных компонентов &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательского интерфейса&lt;/a&gt;, таких как кнопки, меню и списки, которые могут быть подключены к GUI приложения. Для эффективного использования этих встроенных элементов интерфейса, реализация должна была быть построена в соответствии с &lt;em&gt;MVC&lt;/em&gt;. Давайте посмотрим на концептуальную диаграмму приложения &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/schemamvc.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;pointup-mvc--smalltalk-80-krasner--pope&quot;&gt;:point_up:Диаграмма MVC в Smalltalk-80 (Krasner &amp;amp; Pope)&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Диаграмма MVC в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; (&lt;a href=&quot;http://www.math.rsu.ru/smalltalk/gui/&quot;&gt;Krasner &amp;amp; Pope&lt;/a&gt;) Все объекты в Smalltalk общаться друг с другом при помощи сообщений, которые является способом вызова методов объекта. На первый взгляд, диаграмма MVC кажется немного странной. Model-View и Controller-Model имеют зависимости направленные в обе стороны. Вторым интересным аспектом было то, что пользовательский ввод идет непосредственно через контроллер. Это является существенным изменением, как правило мы ожидаем от пользователя взаимодействия с элементами интерфейса в представлении (View), а не в корнтроллере.&lt;/p&gt;

&lt;p&gt;В &lt;strong&gt;Smalltalk-80&lt;/strong&gt;, все данные с устройства ввода подаются непосредственно в контроллер. Давайте кратко рассмотрим, как MVC поддерживается в &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;mvc---smalltalk-80&quot;&gt;MVC классы в Smalltalk-80.&lt;/h1&gt;

&lt;p&gt;Есть три абстрактных класса называемые Модель, Вид и Контроллер. Все конкретные реализации модели, вида и контроллера должны иметь подклассы этих абстрактных суперклассов. Давайте взглянем на классы (это сокращенное описание — см. &lt;a href=&quot;http://www.math.rsu.ru/smalltalk/gui/&quot;&gt;Krasner &amp;amp; Pope&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Модель&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Model&lt;/strong&gt; реализует общую модель поведения. Он реализует механизм зависимости обслуживания.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вид может зарегистрироваться на конкретную модель чтобы стать подписчиком и получать оповещения об изменениях. Если конкретная модель рассылает свои сообщения, то они будут автоматически отправлены всем своим подписанным представлениям. Это реализация &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D1%82%D0%B5%D0%BB%D1%8C_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29&quot;&gt;паттерна Наблюдатель&lt;/a&gt; (паттерн поведения объектов). Конкретная модель напрямую не знает о зависимых от него представлениях.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Представление&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;View&lt;/strong&gt; реализует общие поведения представления. Встроенный набор компонентов подкласса представления (например, StandardSystemView — стандартное окно и TextEditorView — текстовый редактор).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Представления могут быть вложенными для разработки сложного пользовательского интерфейса. Например, StandardSystemView (т.е. окна) содержит компонент представления, называемые TextEditorView.
Каждое представление может иметь одну модель и один контроллер. Встроенный компоненты по умолчанию имеют заранее определенный класс контроллера для реализации своего стандартного поведения. Чтобы создать экземпляр компонента, вам нужно настроить свою модель и отобразить компонент. Компонент затем будет инициализировать по умолчанию контроллер со своим экземпляром модели и регистрироваться в ней для получения сообщений. При закрытии компонента, освобождаются все вложенные компоненты. Когда представление освободилось, оно удаляет свои подписки на сообщения из модели. Если вы хотите чтобы компоненты имели своё уникальное поведения, вы можете создать свой контроллер для него.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Контроллер&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Controller&lt;/strong&gt; реализующий общие поведения. Каждый контроллер имеет ссылку на одну модель, один контроллер, и глобальную переменную называемую сенсор, который предоставляет интерфейс взаимодействия для устройств ввода (мышь, клавиатура). Абстрактный класс контроллера реализующий его общие поведения для определения уже конкретного контроллера и соответствующего ему представления. Если конкретное представление является активным (которое в данный момент использует пользователь), то егоконтроллер осуществляет управление всего пользовательского ввода.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Контроллер должен иметь прямую ссылку на представление, например для того чтобы знать расположен ли сейчас курсора мыши над конкретным представлением. Важно отметить, что только контроллеры, а не представление, получает информацию о вводе данных (с клавиатуры или мышки).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mvc--smalltalk-80-1&quot;&gt;Ключевые особенности реализации MVC на &lt;strong&gt;Smalltalk-80&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;представления могут быть вложенными;&lt;/li&gt;
  &lt;li&gt;каждый встроенный компонент (например &lt;strong&gt;ListBox&lt;/strong&gt;) это представление;&lt;/li&gt;
  &lt;li&gt;каждый вид имеет соответствующий контроллер;&lt;/li&gt;
  &lt;li&gt;контроллер осведомляет своё представление, если оно активно;&lt;/li&gt;
  &lt;li&gt;активные контроллер (чье представление в данный момент активно) получает данные которые изменил пользователь при помощи устройств ввода;&lt;/li&gt;
  &lt;li&gt;контроллер может обновить представление (компонент) на основе действий пользователя;&lt;/li&gt;
  &lt;li&gt;контроллер изменяет модель на действий пользователя;&lt;/li&gt;
  &lt;li&gt;представление обновляет себя пир помощи наблюдателя, синхронизированного с моделью.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/article/2014/01/04/2014-MVC.html</link>
        <guid isPermaLink="true">http://yourdomain.com/article/2014/01/04/2014-MVC.html</guid>
        
        
        <category>article</category>
        
      </item>
    
  </channel>
</rss>
