<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alobanov</title>
    <description></description>
    <link>http://lobanov-aw.com</link>
    <atom:link href="http://lobanov-aw.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Классический MVC</title>
        <description>&lt;h1 id=&quot;mvc--smalltalk-80&quot;&gt;Перевод статьи Била Сандерса о реализации классического мета паттерна MVC на Smalltalk-80. &lt;/h1&gt;

&lt;p&gt;Это мой вольный перевод статьи Била Сандерса о реализации классического мета паттерна MVC на Smalltalk-80. Так как это мой первый опыт, строго не судите и в комментариях желательно оставлять какие либо замечания по тексту. Переводил не дословно, немного из русскоязычных источников накопал (и каюсь, перевёл не всё).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;предисловие&lt;/h3&gt;

&lt;p&gt;Это не введение в модель MVC, а обзор его осуществления на &lt;a href=&quot;https://ru.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk-80&lt;/a&gt; для понимания первоначальных намерений и функций триады. Классическая MVC поможет лучше понять последующее развитие паттернов, которые появились позже. Посмотрим, как простое MVC приложение работает в Smalltalk-80 и изучим как оно может быть реализовано на языке &lt;strong&gt;ActionScript&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Model-view-controller&lt;/strong&gt; (MVC, «Модель-представление-поведение», «Модель-представление-контроллер») — архитектура программного обеспечения, в которой &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&quot;&gt;модель данных&lt;/a&gt; приложения, &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательский интерфейс&lt;/a&gt; и управляющая логика разделены на три отдельных компонента, так, что модификация одного из компонентов оказывает минимальное воздействие на другие компоненты.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;model-view-controller--smalltalk-80&quot;&gt;Реализация Model-View-Controller в Smalltalk-80.&lt;/h3&gt;
&lt;p&gt;Модель MVC облегчает разделение ответственности при разработке интерактивных графических приложений. Логика и состояние приложения, как пользователи взаимодействуют с приложением, и как состояние приложения представляется пользователю по средствам отдельных элементов триады MVC. Smalltalk-80 использует метафору MVC, что обеспечивает встроенную поддержку для интерактивной разработки приложений.&lt;/p&gt;

&lt;p&gt;Идея заключалась в том, чтобы обеспечить набор встроенных компонентов &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательского интерфейса&lt;/a&gt;, таких как кнопки, меню и списки, которые могут быть подключены к GUI приложения. Для эффективного использования этих встроенных элементов интерфейса, реализация должна была быть построена в соответствии с &lt;em&gt;MVC&lt;/em&gt;. Давайте посмотрим на концептуальную диаграмму приложения &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/schemamvc.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;mvc--smalltalk-80-krasner--pope&quot;&gt;Диаграмма MVC в Smalltalk-80 (Krasner &amp;amp; Pope)&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Диаграмма &lt;em&gt;MVC&lt;/em&gt; в Smalltalk-80 (Krasner &amp;amp; Pope) Все объекты в Smalltalk общаться друг с другом при помощи сообщений, которые является способом вызова методов объекта. На первый взгляд, диаграмма &lt;em&gt;MVC&lt;/em&gt; кажется немного странной. Model-View и Controller-Model имеют зависимости направленные в обе стороны. Вторым интересным аспектом было то, что пользовательский ввод идет непосредственно через контроллер. Это является существенным изменением, как правило мы ожидаем от пользователя взаимодействия с элементами интерфейса в представлении (View), а не в корнтроллере. &lt;/p&gt;

&lt;p&gt;В Smalltalk-80, все данные с устройства ввода подаются непосредственно в контроллер. Давайте кратко рассмотрим, как &lt;em&gt;MVC&lt;/em&gt; поддерживается в Smalltalk-80.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;mvc---smalltalk-80&quot;&gt;&lt;em&gt;MVC&lt;/em&gt; классы в Smalltalk-80.&lt;/h1&gt;

&lt;p&gt;Есть три абстрактных класса называемые Модель, Вид и Контроллер. Все конкретные реализации модели, вида и контроллера должны иметь подклассы этих абстрактных суперклассов. Давайте взглянем на классы (это сокращенное описание — см. &lt;a href=&quot;http://www.math.rsu.ru/smalltalk/gui/&quot;&gt;Krasner &amp;amp; Pope&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Модель&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Model&lt;/strong&gt; реализует общую модель поведения. Он реализует механизм зависимости обслуживания. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вид может зарегистрироваться на конкретную модель чтобы стать подписчиком и получать оповещения об изменениях. Если конкретная модель рассылает свои сообщения, то они будут автоматически отправлены всем своим подписанным представлениям. Это реализация &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D1%82%D0%B5%D0%BB%D1%8C_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29&quot;&gt;паттерна Наблюдатель&lt;/a&gt; (паттерн поведения объектов). Конкретная модель напрямую не знает о зависимых от него представлениях.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Представление&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;View&lt;/strong&gt; реализует общие поведения представления. Встроенный набор компонентов подкласса представления (например, StandardSystemView — стандартное окно и TextEditorView — текстовый редактор). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Представления могут быть вложенными для разработки сложного пользовательского интерфейса. Например, StandardSystemView (т.е. окна) содержит компонент представления, называемые TextEditorView.
Каждое представление может иметь одну модель и один контроллер. Встроенный компоненты по умолчанию имеют заранее определенный класс контроллера для реализации своего стандартного поведения. Чтобы создать экземпляр компонента, вам нужно настроить свою модель и отобразить компонент. Компонент затем будет инициализировать по умолчанию контроллер со своим экземпляром модели и регистрироваться в ней для получения сообщений. При закрытии компонента, освобождаются все вложенные компоненты. Когда представление освободилось, оно удаляет свои подписки на сообщения из модели. Если вы хотите чтобы компоненты имели своё уникальное поведения, вы можете создать свой контроллер для него.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Контроллер&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Controller&lt;/strong&gt; реализующий общие поведения. Каждый контроллер имеет ссылку на одну модель, один контроллер, и глобальную переменную называемую сенсор, который предоставляет интерфейс взаимодействия для устройств ввода (мышь, клавиатура). Абстрактный класс контроллера реализующий его общие поведения для определения уже конкретного контроллера и соответствующего ему представления. Если конкретное представление является активным (которое в данный момент использует пользователь), то егоконтроллер осуществляет управление всего пользовательского ввода.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Контроллер должен иметь прямую ссылку на представление, например для того чтобы знать расположен ли сейчас курсора мыши над конкретным представлением. Важно отметить, что только контроллеры, а не представление, получает информацию о вводе данных (с клавиатуры или мышки).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mvc--smalltalk-80-1&quot;&gt;Ключевые особенности реализации &lt;em&gt;MVC&lt;/em&gt; на Smalltalk-80:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;представления могут быть вложенными;&lt;/li&gt;
  &lt;li&gt;каждый встроенный компонент (например ListBox) это представление;&lt;/li&gt;
  &lt;li&gt;каждый вид имеет соответствующий контроллер;&lt;/li&gt;
  &lt;li&gt;контроллер осведомляет своё представление, если оно активно;&lt;/li&gt;
  &lt;li&gt;активные контроллер (чье представление в данный момент активно) получает данные которые изменил пользователь при помощи устройств ввода;&lt;/li&gt;
  &lt;li&gt;контроллер может обновить представление (компонент) на основе действий пользователя;&lt;/li&gt;
  &lt;li&gt;контроллер изменяет модель на действий пользователя;&lt;/li&gt;
  &lt;li&gt;представление обновляет себя пир помощи наблюдателя, синхронизированного с моделью.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://lobanov-aw.com/article/2014/01/04/2014-MVC/</link>
        <guid isPermaLink="true">http://lobanov-aw.com/article/2014/01/04/2014-MVC/</guid>
      </item>
    
  </channel>
</rss>