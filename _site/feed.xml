<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lobanov</title>
    <description>Разработчик приложений под iOS c 2011 года. Живу и работаю в Екатеринбурге. Увлекаюсь web-дизайном и проектированием интерфейсов для мобильных устройств.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Feb 2020 09:26:34 +0000</pubDate>
    <lastBuildDate>Wed, 26 Feb 2020 09:26:34 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Валидируем</title>
        <description>&lt;h1 id=&quot;мотивы&quot;&gt;Мотивы&lt;/h1&gt;

&lt;p&gt;Необходимо последовательно выполнить провероку над данными, а затем для них применить изменения. Причем порядок проверок и изменений хочется применять как угодно, в зависимости от ситуации. В этом нам на помощь приходит поведенческий паттерн &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D0%BF%D0%BE%D1%87%D0%BA%D0%B0_%D0%BE%D0%B1%D1%8F%D0%B7%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B5%D0%B9&quot;&gt;&lt;strong&gt;«Цепочка обязанностей»&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Например нам надо проверить строку с телефонным номером и отформатировать ее. Опишем по порядку какие действия мы хотим выполнить:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Строка не должна быть пустой и не &lt;span class=&quot;wordcode&quot;&gt;nil&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Строка должна содержать определенное количество символов&lt;/li&gt;
  &lt;li&gt;Необходимо отформатировать строку с учетом указанного формата&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Цепочка обязанностей&lt;/strong&gt; — это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Playground с &lt;a href=&quot;https://gist.github.com/alobanov/30dec2f118532b4cc32d82bc321ac1bd&quot;&gt;примером&lt;/a&gt; на Git-Hub :octocat:&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;реализация&quot;&gt;Реализация&lt;/h1&gt;

&lt;p&gt;Общий интерфейс для всех обработчиков &lt;span class=&quot;wordcode&quot;&gt;MiddlewareProtocol&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Связываем текущий и следующий экземпляр обработчика&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;@discardableResult&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Этот метод необходимо перегрузить, в нем описывается вся логика&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Вспомогательный метод для упрощения вызова следующей проверки в цепочке&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Добавим перечисление &lt;span class=&quot;wordcode&quot;&gt;MiddlewareItem&lt;/span&gt; – этот тип данных содержит само значение &lt;span class=&quot;wordcode&quot;&gt;.value&lt;/span&gt; и ошибку &lt;span class=&quot;wordcode&quot;&gt;.error&lt;/span&gt; если мы не прошли валидацию:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Базовая реализация обработчика &lt;span class=&quot;wordcode&quot;&gt;MiddlewareProtocol&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;@discardableResult&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;все-обработчики-необходимо-наследовать-от-middleware&quot;&gt;Все обработчики необходимо наследовать от Middleware&lt;/h4&gt;

&lt;p&gt;Теперь напишем конкретные обработчики для валидации и изменения данных, в нашем случае это строка:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Обработчик проверки на &lt;span class=&quot;wordcode&quot;&gt;nil&lt;/span&gt; и пустую строку: &lt;span class=&quot;wordcode&quot;&gt;CheckNilMiddleware&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Обработчик проверки на длинну строки: &lt;span class=&quot;wordcode&quot;&gt;CheckCountMiddleware&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Обработчик который форматирует строку с учетом указанного формата: &lt;span class=&quot;wordcode&quot;&gt;PhoneFormatterMiddleware&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Реализация &lt;a href=&quot;https://github.com/alobanov/ExampleArticleComposite/tree/master/chainOfResponsibilityValidation/chainOfResponsibilityValidation.playground&quot;&gt;всех трех классов описаных выше&lt;/a&gt; :octocat:.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;разберем-подробнее&quot;&gt;Разберем подробнее&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Обработчик должен наследоваться от &lt;span class=&quot;wordcode&quot;&gt;Middleware&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Перегружем метод &lt;span class=&quot;wordcode&quot;&gt;check(value: MiddlewareItem) -&amp;gt; MiddlewareItem&lt;/span&gt; и описываем логику проверок, изменений над данными &lt;span class=&quot;wordcode&quot;&gt;.value(let val)&lt;/span&gt;.&lt;/li&gt;
  &lt;li&gt;Если все успешно вызываем следующую проверку в нашем списке цепочек &lt;span class=&quot;wordcode&quot;&gt;return checkNext(value: value)&lt;/span&gt;
    &lt;ul&gt;
      &lt;li&gt;Если хотим прервать выполнение то сразу возвращаем ошибку &lt;span class=&quot;wordcode&quot;&gt;return .error(“Example error text”)&lt;/span&gt;.&lt;/li&gt;
      &lt;li&gt;Если хотим подменить данные то передаем новое значение &lt;span class=&quot;wordcode&quot;&gt;return checkNext(value: .value(“New value”))&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Выполняем проверку&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Валидация не прошла, возвращаем ошибку&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Example error text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Если все успешно вызываем следующую&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// проверку в нашем списке цепочек&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;смотри-комментарии-к-коду&quot;&gt;Смотри комментарии к коду&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;использование&quot;&gt;Использование&lt;/h2&gt;

&lt;p&gt;Проверяем и отформатируем телефонный номер с помощью нашей реализации:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CheckNilMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CheckCountMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhoneFormatterMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+X (XXX) XXX XX-XX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;79634480209&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Можно добавить немного функциональной магии, добавим оператор &lt;span class=&quot;wordcode&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;precedencegroup&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ForwardOperator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;associativity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;infix&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ForwardOperator&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MiddlewareProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// после можно использовать такое написание&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Middleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NilValidation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CountValidation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PhoneFormatterValidation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;+X (XXX) XXX XX-XX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;79634481259&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Результатом выполнения будет вывод в консоль: &lt;span class=&quot;wordcode&quot;&gt;+7 (963) 448 02-09&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;в-заключении&quot;&gt;В заключении&lt;/h2&gt;

&lt;p&gt;Таким образом мы можем добавлять сколько угодно не зависящих друг от друга обработчиков и использовать их в зависимости от ситуации.&lt;/p&gt;

&lt;p&gt;Где еще можно использовать:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Редактор изображений. Добавить обработчики которые будут выполнять манипуляции над изображением, таким образом получим удобный способ применять фильтры&lt;/li&gt;
  &lt;li&gt;Валидация при авторизации или регистрации пользователя&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;есть-вопросы-пишите-сюда--alobanov&quot;&gt;Есть вопросы? Пишите сюда – &lt;a href=&quot;https://twitter.com/alobanov&quot;&gt;@alobanov&lt;/a&gt;&lt;/h4&gt;

</description>
        <pubDate>Tue, 14 Nov 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/article/2017/11/14/2017-Chain.html</link>
        <guid isPermaLink="true">http://localhost:4000/article/2017/11/14/2017-Chain.html</guid>
        
        <category>composite</category>
        
        <category>ios</category>
        
        <category>swift</category>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>Компоновщик</title>
        <description>&lt;h1 id=&quot;мотивы&quot;&gt;Мотивы&lt;/h1&gt;

&lt;p&gt;Часто в приложениях встречаются табличные представления &lt;span class=&quot;wordcode&quot;&gt;UITableView&lt;/span&gt;, &lt;span class=&quot;wordcode&quot;&gt;UICollectionView&lt;/span&gt;. В зависимости от задачи я использовал в качестве структуры данных массив либо словарь. Это решение несло ряд ограничений и не было гибким. Для меня более удобным стало использование &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%BE%D0%B2%D1%89%D0%B8%D0%BA&quot;&gt;&lt;strong&gt;компоновщика&lt;/strong&gt;&lt;/a&gt;. Проект с &lt;a href=&quot;https://github.com/alobanov/ExampleArticleComposite/tree/master/compositeTable&quot;&gt;примером&lt;/a&gt; на Git-Hub :octocat:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Компоновщик&lt;/strong&gt; — структурный паттерн проектирования. Он позволяет сгруппировать объекты в древовидную структуру, а затем работать с ними как с единым объектом.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;теория&quot;&gt;Теория&lt;/h1&gt;

&lt;p&gt;Как будет выглядеть наше дерево? Табличное представление состоит из списка &lt;span class=&quot;wordcode&quot;&gt;секций&lt;/span&gt;. В свою очередь, секции содержат модели &lt;span class=&quot;wordcode&quot;&gt;ячеек&lt;/span&gt; (тоже самое для коллекций). Таким образом нам нужны элементы двух типов которые могут содержать дочерние элементы (&lt;strong&gt;контейнеры&lt;/strong&gt;) и конечные элементы (&lt;strong&gt;листья&lt;/strong&gt;) в которые нельзя добавлять детей.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Контейнер&lt;/strong&gt; (Композит) — составной элемент дерева. Содержит дочерние элементы — Листья или другие Контейнеры — но не знает, какие именно, так как работает с ними только через общий интерфейс &lt;strong&gt;Компонента&lt;/strong&gt; (&lt;span class=&quot;wordcode&quot;&gt;CompoundItemProtocol&lt;/span&gt;). Методы этого класса переадресуют основную работу своим дочерним компонентам, хотя и могут добавлять что-то своё к результату. Таким образом, паттерн &lt;strong&gt;Компоновщик&lt;/strong&gt; позволяет нам работать с деревьями объектов любой сложности, не обращая внимание на конкретные модели, формирующие дерево.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;реализация&quot;&gt;Реализация&lt;/h1&gt;

&lt;p&gt;Напишем общий интерфейс для элементов дерева &lt;span class=&quot;wordcode&quot;&gt;CompoundItemProtocol&lt;/span&gt;, все элементы нашей структуры должны релиазовать этот протокол. Так же создадим перечисление с доступными уровнями вложенности &lt;span class=&quot;wordcode&quot;&gt;CompoundItemLevel&lt;/span&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/67bb633143ab5340328be8e9814c27e0.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;компонент-определяет-общий-интерфейс-для-простых-и-составных-компонентов-дерева&quot;&gt;Компонент определяет общий интерфейс для простых и составных компонентов дерева.&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Так как все модели должны его реализовывать - напишем базовый каласс &lt;span class=&quot;wordcode&quot;&gt;BaseCompoundItem&lt;/span&gt; на базе которого будем добавлять необходимые модели нашего дерева:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/6858458b24cadc7f7dce6ea6106e2222.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;контейнер-или-композит--это-составной-элемент-дерева&quot;&gt;Контейнер (или Композит) — это составной элемент дерева.&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Базовая реализация готова. К ней можно добавить конкретные модели: &lt;span class=&quot;wordcode&quot;&gt;секций&lt;/span&gt; и &lt;span class=&quot;wordcode&quot;&gt;ячееки&lt;/span&gt;. Для создания модели элементов дерева будем использовать паттерн &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D1%80%D0%B0%D1%82%D0%BE%D1%80_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)&quot;&gt;&lt;strong&gt;декоратор&lt;/strong&gt;&lt;/a&gt;, чтобы расширить нашу базовую реализацию &lt;span class=&quot;wordcode&quot;&gt;BaseCompoundItem&lt;/span&gt;. Этот структурный паттерн позволит динамически добавить объектам новую функциональность, используя так называемые обвертки.&lt;/p&gt;

&lt;p&gt;Напишем модель для &lt;span class=&quot;wordcode&quot;&gt;секции&lt;/span&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/90c513a5c906937f5959084f1c02e6f7.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;модель-секции-тоже-является-контейнером-так-как-может-содержать-дочернии-элементы&quot;&gt;Модель секции тоже является контейнером так как может содержать дочернии элементы.&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;И модель для &lt;span class=&quot;wordcode&quot;&gt;ячейки&lt;/span&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/11e1e95eba62aa4e70857fcebe0d96ca.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;модель-ячейки-является-листом--это-простой-элемент-дерева-не-имеющий-ответвлений&quot;&gt;Модель ячейки является листом – это простой элемент дерева, не имеющий ответвлений.&lt;/h4&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;использование&quot;&gt;Использование&lt;/h2&gt;

&lt;p&gt;Код написан, можно опробовать нашу новую структуру данных:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/a2c1880e5e52d0cfcd0b17d9edcfe8e4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Теперь выполняем &lt;span class=&quot;wordcode&quot;&gt;tableView.reloadData()&lt;/span&gt;, и готово. Посмотреть пример кода можно &lt;a href=&quot;https://github.com/alobanov/ExampleArticleComposite/tree/master/compositeTable&quot;&gt;тут&lt;/a&gt; :octocat: .&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;в-заключении&quot;&gt;В заключении&lt;/h2&gt;

&lt;p&gt;Что полезного можно добавить:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Фильтры в модели ячеек. Добавим дополнительный параметр &lt;span class=&quot;wordcode&quot;&gt;isVisible&lt;/span&gt; — от него зависит, будут ли модели возвращаться.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CellCompoundItem&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CompoundItemProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Проверка валидации всех полей таблицы. Добавляем новый метод &lt;span class=&quot;wordcode&quot;&gt;func isValid() -&amp;gt; Bool&lt;/span&gt; в &lt;span class=&quot;wordcode&quot;&gt;CompoudItemProtocol&lt;/span&gt;. Реализуем его во всех моделях ячеек нашего дерева.&lt;/li&gt;
  &lt;li&gt;Проверка изменений данных таблицы при создании сложных форм ввода данных (создается по аналогии с п. 2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;есть-вопросы-пишите-сюда--alobanov&quot;&gt;Есть вопросы? Пишите сюда – &lt;a href=&quot;https://twitter.com/alobanov&quot;&gt;@alobanov&lt;/a&gt;&lt;/h4&gt;

</description>
        <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/article/2017/11/03/2017-Composite.html</link>
        <guid isPermaLink="true">http://localhost:4000/article/2017/11/03/2017-Composite.html</guid>
        
        <category>composite</category>
        
        <category>ios</category>
        
        <category>swift</category>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>ALHudManager</title>
        <description>&lt;h1 id=&quot;зачем&quot;&gt;Зачем? &lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alobanov/ALHUDManager&quot;&gt;ALHUDManager&lt;/a&gt; — это удобная обвёртка для быстрого использования &lt;a href=&quot;https://github.com/jdg/MBProgressHUD&quot;&gt;MBProgressHUD&lt;/a&gt;. Основная функция которого избавить вас от надобности создавать экземпляр класса и указывать view для отображения HUD. (Возможность задать view вручную тоже есть).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;как-использовать&quot;&gt;Как использовать&lt;/h3&gt;

&lt;p&gt;Можно полностью не настраивать &lt;span class=&quot;wordcode&quot;&gt;HUDItem&lt;/span&gt;, указав ему &lt;span class=&quot;wordcode&quot;&gt;title&lt;/span&gt; и &lt;span class=&quot;wordcode&quot;&gt;detail&lt;/span&gt; - вы просто покажете сообщение с заголовком и подзаголовком на 2 секуды.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/d46dabb470e0a54ade3ff934ae935de5.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Принудительно скрыть HUD, например если вы используете стиль: &lt;span class=&quot;wordcode&quot;&gt;ProgressHUDModeIndeterminate&lt;/span&gt;, &lt;span class=&quot;wordcode&quot;&gt;ProgressHUDModeDeterminate&lt;/span&gt; или &lt;span class=&quot;wordcode&quot;&gt;ProgressHUDModeDeterminateHorizontalBar&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;установить-свое-изображение&quot;&gt;Установить свое изображение&lt;/h3&gt;

&lt;p&gt;В проекте так же имеется базовый набор картинок которыми вы можете пользоваться:
&lt;span class=&quot;wordcode&quot;&gt;HUDImage_Success&lt;/span&gt;✅,
&lt;span class=&quot;wordcode&quot;&gt;HUDImage_SadFace&lt;/span&gt;☹,
&lt;span class=&quot;wordcode&quot;&gt;HUDImage_Star&lt;/span&gt;⭐,
&lt;span class=&quot;wordcode&quot;&gt;HUDImage_Heart&lt;/span&gt;❤️&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/d5b8f79aded0fc642a5f378819663643.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;или-можете-установить-свое-изображение&quot;&gt;Или можете установить свое изображение.&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;методы-класса&quot;&gt;Методы класса:&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/07d07dd0cef25a49c4832df39b6377ec.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;есть-вопросы-пишите-сюда--alobanov&quot;&gt;Есть вопросы? Пишите сюда – &lt;a href=&quot;https://twitter.com/alobanov&quot;&gt;@alobanov&lt;/a&gt;&lt;/h4&gt;

</description>
        <pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/article/2014/06/22/2014-ALHUDManager.html</link>
        <guid isPermaLink="true">http://localhost:4000/article/2014/06/22/2014-ALHUDManager.html</guid>
        
        
        <category>article</category>
        
      </item>
    
      <item>
        <title>Мультиязычность в iOS</title>
        <description>&lt;!-- &lt;div class=&quot;size-960 banner-red&quot;&gt;
    &lt;img src=&quot;/images/github.svg&quot; alt=&quot;GitHub&quot; size=&quot;100&quot;&gt;
 &lt;/div&gt;--&gt;

&lt;p&gt;Стандартное решение от :apple:&lt;strong&gt;Apple&lt;/strong&gt; предлагает отталкиваться от выбранного языка на нашем устройстве. То есть, чтобы поменять язык в приложении, необходимо полностью поменять язык системы. Что делать, если хочется изменить язык на лету, не выходя из приложения и, тем более, не меняя полностью локаль на устройстве?&lt;/p&gt;

&lt;p&gt;Один из вариантов – брать необходимый файл переводов и локализовать приложение на основе выставления своих настроек языка, сохраняя их например в &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Я подготовил менеджер который позволит без труда реализовать быстрое переключение языка в приложении. Проект можно скачать тут &lt;a href=&quot;https://github.com/alobanov/ALLocalizedManager&quot;&gt;ALLocalizedManager&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;менеджер-мультиязычноти&quot;&gt;Менеджер мультиязычноти&lt;/h1&gt;

&lt;p&gt;Чтобы все это дело заработало необходимо проинициализировать &lt;a href=&quot;https://github.com/alobanov/ALLocalizedManager&quot;&gt;ALLocalizedManager&lt;/a&gt; :octocat: вызвав метод &lt;span class=&quot;wordcode&quot;&gt;ALLocalizedInit&lt;/span&gt; (все методы менеджера сделаны макросами, для удобства) желательно поместить вызов в &lt;span class=&quot;wordcode&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; класса &lt;span class=&quot;wordcode&quot;&gt;AppDelegate&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;В момент инициализации проверяется установленый язык из &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;, если настроек еще нет (например, при первом запуске приложения), то берем язык системы и записываем в &lt;span class=&quot;wordcode&quot;&gt;UserDefaults&lt;/span&gt;. После этого, даже если поменять язык системы, в приложении сохранится тот язык, который был проинициалищирован при первом запуске приложения.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;использование&quot;&gt;использование&lt;/h3&gt;

&lt;p&gt;В момент установки новой локали необходимо разослать сообщение об этом изменении:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;ALLocalizationSetLanguage(@&quot;en&quot;);
ALLocalizationThrowNotification;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Так как необходимо переключать язык на лету надо отслеживать события измененя, поэтому подписываемся на событие &lt;span class=&quot;wordcode&quot;&gt;ALLocalizedManagerChangeLangNotification&lt;/span&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
    [nc addObserver:self
           selector:@selector(changeAppLanguage:)
               name:ALLocalizedManagerChangeLangNotification
             object:nil];

-(void) updateTitles:(NSNotification*) notify {
    NSLog(ALLocalizedString(@&quot;Change_language&quot;, @&quot;Изменить язык&quot;));
                    forState:UIControlStateNormal ];
    NSLog(ALLocalizedString(@&quot;Hello&quot;, @&quot;Привет мир&quot;));
    NSLog(ALLocalizedStringFromTable(@&quot;Current_lang&quot;, @&quot;Русский&quot;, @&quot;examplePlist&quot;));
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;После этого в методе обновления нужно обновить текстовки &lt;strong&gt;/&lt;/strong&gt; картинки &lt;strong&gt;/&lt;/strong&gt; ресурсы.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;настройка-языков&quot;&gt;настройка языков&lt;/h3&gt;

&lt;p&gt;Логика выбора языка во время первого запуска приложения: берется язык системы и проверяется, есть ли он в определенном нами списке  языков. Если системный язык отсутствует в словаре, берем тот, который отмечен ключом &lt;span class=&quot;wordcode&quot;&gt;isDefault&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Пример словаря языков, который необходимо настроить в зависимости от вашего проекта:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (NSArray *) languageList {
    return @[@{@&quot;ru&quot;: @&quot;Русский&quot;, @&quot;isDefault&quot;:@&quot;YES&quot;},
             @{@&quot;en&quot;: @&quot;English&quot;},
             @{@&quot;es&quot;: @&quot;Spanish&quot;}];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;также-можно-локализовать-ресурсы-и-картинки-allocalizationresource-allocalizationimage&quot;&gt;Также можно локализовать ресурсы и картинки (ALLocalizationResource, ALLocalizationImage)&lt;/h4&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;методы&quot;&gt;методы&lt;/h3&gt;

&lt;p&gt;Все макросы для работы с менеджером:metal::&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/alobanov/f07585a35c96de9345514acff490b062.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pluralization-числительные-формы&quot;&gt;Pluralization (Числительные формы)&lt;/h3&gt;

&lt;p&gt;Для того чтобы добавить в проект числительные формы необходимо сделать слудующее:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Добавить &lt;span class=&quot;wordcode&quot;&gt;.strings&lt;/span&gt; файл &lt;span class=&quot;wordcode&quot;&gt;LocalizablePlural&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Допишите в него числовых формы, например:&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;/* LocalizablePlural */
&quot;%d Murloc (plural rule: one)&quot; = &quot;%d мурлок&quot;;
&quot;%d Murloc (plural rule: few)&quot; = &quot;%d мурлока&quot;;
&quot;%d Murloc (plural rule: many)&quot; = &quot;%d мурлоков&quot;;
&quot;%d Murloc (plural rule: other)&quot; = &quot;%d мурлока&quot;;

// Использование в проекте
NSString *pluralString = ALLocalizedPluralString(@&quot;Murloc&quot;, 4, nil);&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;есть-вопросы-пишите-сюда--alobanov&quot;&gt;Есть вопросы? Пишите сюда – &lt;a href=&quot;https://twitter.com/alobanov&quot;&gt;@alobanov&lt;/a&gt;&lt;/h4&gt;
</description>
        <pubDate>Tue, 07 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/libs/2014/01/07/2014-ALLocalizedManager.html</link>
        <guid isPermaLink="true">http://localhost:4000/libs/2014/01/07/2014-ALLocalizedManager.html</guid>
        
        
        <category>libs</category>
        
      </item>
    
      <item>
        <title>Классический MVC</title>
        <description>&lt;h1 id=&quot;перевод-статьи-била-сандерса-о-реализации-классического-мета-паттерна-mvc-на-smalltalk-80&quot;&gt;Перевод статьи Била Сандерса о реализации классического мета паттерна MVC на Smalltalk-80. &lt;/h1&gt;

&lt;p&gt;Это мой вольный перевод статьи Била Сандерса о реализации классического мета паттерна &lt;strong&gt;MVC&lt;/strong&gt; на &lt;strong&gt;Smalltalk-80&lt;/strong&gt;. Так как это мой первый опыт, строго не судите и в комментариях желательно оставлять какие либо замечания по тексту. Переводил не дословно, немного из русскоязычных источников накопал (:grin: и каюсь, перевёл не всё).&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h1&gt;

&lt;p&gt;Это не введение в модель MVC, а обзор его осуществления на &lt;a href=&quot;https://ru.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk-80&lt;/a&gt; для понимания первоначальных намерений и функций триады. Классическая MVC поможет лучше понять последующее развитие паттернов, которые появились позже. Посмотрим, как простое MVC приложение работает в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; и изучим как оно может быть реализовано на языке &lt;strong&gt;ActionScript&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Model-view-controller&lt;/strong&gt; (MVC, «Модель-представление-поведение», «Модель-представление-контроллер») — архитектура программного обеспечения, в которой &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&quot;&gt;модель данных&lt;/a&gt; приложения, &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательский интерфейс&lt;/a&gt; и управляющая логика разделены на три отдельных компонента, так, что модификация одного из компонентов оказывает минимальное воздействие на другие компоненты.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;реализация-model-view-controller-в-smalltalk-80&quot;&gt;Реализация Model-View-Controller в Smalltalk-80.&lt;/h3&gt;
&lt;p&gt;Модель MVC облегчает разделение ответственности при разработке интерактивных графических приложений. Логика и состояние приложения, как пользователи взаимодействуют с приложением, и как состояние приложения представляется пользователю по средствам отдельных элементов триады MVC. &lt;strong&gt;Smalltalk-80&lt;/strong&gt; использует метафору MVC, что обеспечивает встроенную поддержку для интерактивной разработки приложений.&lt;/p&gt;

&lt;p&gt;Идея заключалась в том, чтобы обеспечить набор встроенных компонентов &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81_%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F&quot;&gt;пользовательского интерфейса&lt;/a&gt;, таких как кнопки, меню и списки, которые могут быть подключены к GUI приложения. Для эффективного использования этих встроенных элементов интерфейса, реализация должна была быть построена в соответствии с &lt;em&gt;MVC&lt;/em&gt;. Давайте посмотрим на концептуальную диаграмму приложения &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/schemamvc.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;point_upдиаграмма-mvc-в-smalltalk-80-krasner--pope&quot;&gt;:point_up:Диаграмма MVC в Smalltalk-80 (Krasner &amp;amp; Pope)&lt;/h4&gt;

&lt;hr /&gt;

&lt;p&gt;Диаграмма MVC в &lt;strong&gt;Smalltalk-80&lt;/strong&gt; (&lt;a href=&quot;http://www.math.rsu.ru/smalltalk/gui/&quot;&gt;Krasner &amp;amp; Pope&lt;/a&gt;) Все объекты в Smalltalk общаться друг с другом при помощи сообщений, которые является способом вызова методов объекта. На первый взгляд, диаграмма MVC кажется немного странной. Model-View и Controller-Model имеют зависимости направленные в обе стороны. Вторым интересным аспектом было то, что пользовательский ввод идет непосредственно через контроллер. Это является существенным изменением, как правило мы ожидаем от пользователя взаимодействия с элементами интерфейса в представлении (View), а не в корнтроллере.&lt;/p&gt;

&lt;p&gt;В &lt;strong&gt;Smalltalk-80&lt;/strong&gt;, все данные с устройства ввода подаются непосредственно в контроллер. Давайте кратко рассмотрим, как MVC поддерживается в &lt;strong&gt;Smalltalk-80&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;mvc-классы-в-smalltalk-80&quot;&gt;MVC классы в Smalltalk-80.&lt;/h1&gt;

&lt;p&gt;Есть три абстрактных класса называемые Модель, Вид и Контроллер. Все конкретные реализации модели, вида и контроллера должны иметь подклассы этих абстрактных суперклассов. Давайте взглянем на классы (это сокращенное описание — см. &lt;a href=&quot;http://www.math.rsu.ru/smalltalk/gui/&quot;&gt;Krasner &amp;amp; Pope&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Модель&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Model&lt;/strong&gt; реализует общую модель поведения. Он реализует механизм зависимости обслуживания.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Вид может зарегистрироваться на конкретную модель чтобы стать подписчиком и получать оповещения об изменениях. Если конкретная модель рассылает свои сообщения, то они будут автоматически отправлены всем своим подписанным представлениям. Это реализация &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B1%D0%BB%D1%8E%D0%B4%D0%B0%D1%82%D0%B5%D0%BB%D1%8C_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29&quot;&gt;паттерна Наблюдатель&lt;/a&gt; (паттерн поведения объектов). Конкретная модель напрямую не знает о зависимых от него представлениях.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Представление&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;View&lt;/strong&gt; реализует общие поведения представления. Встроенный набор компонентов подкласса представления (например, StandardSystemView — стандартное окно и TextEditorView — текстовый редактор).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Представления могут быть вложенными для разработки сложного пользовательского интерфейса. Например, StandardSystemView (т.е. окна) содержит компонент представления, называемые TextEditorView.
Каждое представление может иметь одну модель и один контроллер. Встроенный компоненты по умолчанию имеют заранее определенный класс контроллера для реализации своего стандартного поведения. Чтобы создать экземпляр компонента, вам нужно настроить свою модель и отобразить компонент. Компонент затем будет инициализировать по умолчанию контроллер со своим экземпляром модели и регистрироваться в ней для получения сообщений. При закрытии компонента, освобождаются все вложенные компоненты. Когда представление освободилось, оно удаляет свои подписки на сообщения из модели. Если вы хотите чтобы компоненты имели своё уникальное поведения, вы можете создать свой контроллер для него.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Контроллер&lt;/strong&gt;: абстрактный суперкласс &lt;strong&gt;Controller&lt;/strong&gt; реализующий общие поведения. Каждый контроллер имеет ссылку на одну модель, один контроллер, и глобальную переменную называемую сенсор, который предоставляет интерфейс взаимодействия для устройств ввода (мышь, клавиатура). Абстрактный класс контроллера реализующий его общие поведения для определения уже конкретного контроллера и соответствующего ему представления. Если конкретное представление является активным (которое в данный момент использует пользователь), то егоконтроллер осуществляет управление всего пользовательского ввода.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Контроллер должен иметь прямую ссылку на представление, например для того чтобы знать расположен ли сейчас курсора мыши над конкретным представлением. Важно отметить, что только контроллеры, а не представление, получает информацию о вводе данных (с клавиатуры или мышки).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ключевые-особенности-реализации-mvc-на-smalltalk-80&quot;&gt;Ключевые особенности реализации MVC на &lt;strong&gt;Smalltalk-80&lt;/strong&gt;:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;представления могут быть вложенными;&lt;/li&gt;
  &lt;li&gt;каждый встроенный компонент (например &lt;strong&gt;ListBox&lt;/strong&gt;) это представление;&lt;/li&gt;
  &lt;li&gt;каждый вид имеет соответствующий контроллер;&lt;/li&gt;
  &lt;li&gt;контроллер осведомляет своё представление, если оно активно;&lt;/li&gt;
  &lt;li&gt;активные контроллер (чье представление в данный момент активно) получает данные которые изменил пользователь при помощи устройств ввода;&lt;/li&gt;
  &lt;li&gt;контроллер может обновить представление (компонент) на основе действий пользователя;&lt;/li&gt;
  &lt;li&gt;контроллер изменяет модель на действий пользователя;&lt;/li&gt;
  &lt;li&gt;представление обновляет себя пир помощи наблюдателя, синхронизированного с моделью.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 04 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/article/2014/01/04/2014-MVC.html</link>
        <guid isPermaLink="true">http://localhost:4000/article/2014/01/04/2014-MVC.html</guid>
        
        
        <category>article</category>
        
      </item>
    
  </channel>
</rss>
